{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "exec": "rm -rf lib"
        },
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "deploy"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "deploy-test": {
      "name": "deploy-test",
      "description": "Deploy test CDK stacks and execute tests",
      "steps": [
        {
          "spawn": "deploy"
        },
        {
          "spawn": "test"
        }
      ]
    },
    "deploy": {
      "name": "deploy",
      "description": "Deploy test CDK stacks for integration and e2e tests",
      "steps": [
        {
          "exec": "npm run deploy --workspace=test/cdk"
        }
      ]
    },
    "bump": {
      "name": "bump",
      "description": "Bumps version based on latest git tag and generates a changelog entry",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": ""
      },
      "steps": [
        {
          "builtin": "../node_modules/projen/lib/release/bump-version"
        }
      ],
      "condition": "! git log --oneline -1 | grep -q \"chore(release):\""
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compat": {
      "name": "compat",
      "description": "Perform API compatibility check against latest version",
      "steps": [
        {
          "exec": "jsii-diff npm:$(node -p \"require('./package.json').name\") -k --ignore-file .compatignore || (echo \"\nUNEXPECTED BREAKING CHANGES: add keys such as 'removed:constructs.Node.of' to .compatignore to skip.\n\" && exit 1)"
        }
      ]
    },
    "compile-cli-web": {
      "name": "compile-cli-web",
      "description": "Compile TS for CLI web console",
      "steps": [
        {
          "exec": "esbuild --bundle --platform=browser --sourcemap cli/webServerlessSpy.ts --outdir=lib/cli"
        }
      ]
    },
    "compile": {
      "name": "compile",
      "description": "Only compile",
      "steps": [
        {
          "exec": "rm -rf lib && rm -rf temp"
        },
        {
          "exec": "jsii --silence-warnings=reserved-word"
        },
        {
          "spawn": "docgen"
        },
        {
          "exec": "mv lib temp"
        },
        {
          "exec": "tsc --project tsconfig.npm.json --module esnext --outDir lib"
        },
        {
          "exec": "find ./lib -depth -name \"*.js\" -exec sh -c 'mv \"$1\" \"${1%.js}.mjs\"' _ {} \\;"
        },
        {
          "exec": "tsc --project tsconfig.npm.json --module commonjs --outDir lib"
        },
        {
          "exec": "cp -rlf temp/* lib/src"
        },
        {
          "spawn": "bundle-extension"
        },
        {
          "exec": "mkdir lib/extensions"
        },
        {
          "spawn": "bundle-python-extension"
        },
        {
          "spawn": "compile-cli-web"
        },
        {
          "exec": "cp -rlf cli/* lib/cli"
        },
        {
          "exec": "rm -rf temp"
        }
      ]
    },
    "cli": {
      "name": "cli",
      "description": "Run cli",
      "steps": [
        {
          "spawn": "compile-cli-web"
        },
        {
          "exec": "esr cli/cli.ts --cdkoutput ../test/cdk/cdkOutput.json"
        }
      ]
    },
    "bundle-extension": {
      "name": "bundle-extension",
      "description": "Bundle extension",
      "steps": [
        {
          "exec": "esbuild --bundle --platform=node --sourcemap extension/interceptor.ts --outdir=lib/extension/dist/layer/nodejs/node_modules; cp extension/spy-wrapper lib/extension/dist/layer"
        }
      ]
    },
    "bundle-python-extension": {
      "name": "bundle-python-extension",
      "description": "Bundle ptyhon extension",
      "steps": [
        {
          "exec": "cp -rlf extensions/python lib/extensions/python"
        }
      ]
    },
    "docgen": {
      "name": "docgen",
      "description": "Generate API.md from .jsii manifest",
      "steps": [
        {
          "exec": "jsii-docgen -o API.md"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern src test build-tools .projenrc.js"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package",
      "steps": [
        {
          "exec": "if [ ! -z ${CI} ]; then rsync -a . .repo --exclude .git --exclude node_modules --exclude lib && rsync -a ./lib .repo && rm -rf dist && mv .repo dist; else scripts/run-task package-all; fi"
        }
      ]
    },
    "package-all": {
      "name": "package-all",
      "description": "Packages artifacts for all target languages",
      "steps": [
        {
          "spawn": "package:js"
        }
      ]
    },
    "package:js": {
      "name": "package:js",
      "description": "Create js language bindings",
      "steps": [
        {
          "exec": "mkdir -p dist/js && npm pack --pack-destination dist/js"
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation",
      "steps": []
    },
    "post-upgrade": {
      "name": "post-upgrade",
      "description": "Runs after upgrading dependencies"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation"
    },
    "release": {
      "name": "release",
      "description": "Prepare a release from \"main\" branch",
      "env": {
        "RELEASE": "true",
        "MAJOR": "1"
      },
      "steps": [
        {
          "exec": "rm -fr dist"
        },
        {
          "spawn": "bump"
        },
        {
          "spawn": "build"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "exec": "jest --passWithNoTests --all --updateSnapshot"
        },
        {
          "spawn": "eslint"
        }
      ]
    },
    "test:update": {
      "name": "test:update",
      "description": "Update jest snapshots",
      "steps": [
        {
          "exec": "jest --updateSnapshot"
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "unbump": {
      "name": "unbump",
      "description": "Restores version to 0.0.0",
      "env": {
        "OUTFILE": "package.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": ""
      },
      "steps": [
        {
          "builtin": "../node_modules/projen/lib/release/reset-version"
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "npm update npm-check-updates"
        },
        {
          "exec": "npm-check-updates --dep dev --upgrade --target=minor"
        },
        {
          "exec": "npm-check-updates --dep optional --upgrade --target=minor"
        },
        {
          "exec": "npm-check-updates --dep peer --upgrade --target=minor"
        },
        {
          "exec": "npm-check-updates --dep prod --upgrade --target=minor"
        },
        {
          "exec": "npm run upgrade -w test/cdk"
        },
        {
          "exec": "npm install"
        },
        {
          "exec": "npm update"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "jsii -w --silence-warnings=reserved-word"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node -e \\\"console.log(process.env.PATH)\\\"\")"
  }
}
